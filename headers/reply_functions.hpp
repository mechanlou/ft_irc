#pragma once
#include "ircserver.hpp"

class Client;
class Channel;

// errors

void	err_nosuchnick(Client *dst, std::vector<pollfd> &fds);
void	err_nosuchserver(Client *dst, std::vector<pollfd> &fds, std::string server);
void	err_nosuchchannel(Client *dst, std::vector<pollfd> &fds, std::string channel);
void	err_cannotsendtochan(Client *dst, std::vector<pollfd> &fds, std::string chan);
void	err_toomanychannels(Client *dst, std::vector<pollfd> &fds, std::string chan);
void	err_wasnosuchnick(Client *dst, std::vector<pollfd> &fds);
void	err_toomanytargets(Client *dst, std::vector<pollfd> &fds, std::string target, std::string error_code, std::string abort_msg);
void	err_noorigin(Client *dst, std::vector<pollfd> &fds);
void	err_norecipient(Client *dst, std::vector<pollfd> &fds, std::string command);
void	err_notexttosend(Client *dst, std::vector<pollfd> &fds);
void	err_notoplevel(Client *dst, std::vector<pollfd> &fds, std::string mask);
void	err_wildtoplevel(Client *dst, std::vector<pollfd> &fds, std::string mask);
void	err_badmask(Client *dst, std::vector<pollfd> &fds, std::string mask);
void	err_unknowncommand(Client *dst, std::vector<pollfd> &fds, std::string command);
void	err_nomotd(Client *dst, std::vector<pollfd> &fds);
void	err_noadmininfo(Client *dst, std::vector<pollfd> &fds, std::string server);
void	err_fileerror(Client *dst, std::vector<pollfd> &fds, std::string file_op, std::string file);
void	err_nonicknamegiven(Client *dst, std::vector<pollfd> &fds);
void	err_erroneusnickname(Client *dst, std::vector<pollfd> &fds);
void	err_nicknameinuse(Client *dst, std::vector<pollfd> &fds);
void	err_nickcollision(Client *dst, std::vector<pollfd> &fds, std::string user, std::string host);
void	err_unavailableresource(Client *dst, std::vector<pollfd> &fds, std::string resource);
void	err_usernotinchannel(Client *dst, std::vector<pollfd> &fds, std::string target_nick, std::string channel);
void	err_notochannel(Client *dst, std::vector<pollfd> &fds, std::string channel);
void	err_useronchannel(Client *dst, std::vector<pollfd> &fds, std::string channel);
void	err_nologin(Client *dst, std::vector<pollfd> &fds, std::string user);
void	err_summondisabled(Client *dst, std::vector<pollfd> &fds);
void	err_userdisabled(Client *dst, std::vector<pollfd> &fds);
void	err_notregistered(Client *dst, std::vector<pollfd> &fds);
void	err_needmoreparams(Client *dst, std::vector<pollfd> &fds, std::string command);
void	err_alreadyregistered(Client *dst, std::vector<pollfd> &fds);
void	err_nopermforhost(Client *dst, std::vector<pollfd> &fds);
void	err_passwdmismatch(Client *dst, std::vector<pollfd> &fds);
void	err_yourebannedcreep(Client *dst, std::vector<pollfd> &fds);
void	err_youwillbebanned(Client *dst, std::vector<pollfd> &fds);
void	err_keyset(Client *dst, std::vector<pollfd> &fds, std::string channel);
void	err_channelisfull(Client *dst, std::vector<pollfd> &fds, std::string channel);
void	err_unknownmode(Client *dst, std::vector<pollfd> &fds, char mode, std::string channel);
void	err_inviteonlychan(Client *dst, std::vector<pollfd> &fds, std::string channel);
void	err_bannedfromchan(Client *dst, std::vector<pollfd> &fds, std::string channel);
void	err_badchannelkey(Client *dst, std::vector<pollfd> &fds, std::string channel);
void	err_badchanmask(Client *dst, std::vector<pollfd> &fds, std::string channel);
void	err_nochanmodes(Client *dst, std::vector<pollfd> &fds, std::string channel);
void	err_banlistfull(Client *dst, std::vector<pollfd> &fds, char stuff, std::string channel);
void	err_noprivileges(Client *dst, std::vector<pollfd> &fds);
void	err_chanoprivsneeded(Client *dst, std::vector<pollfd> &fds, std::string channel);
void	err_cantkillserver(Client *dst, std::vector<pollfd> &fds);
void	err_restricted(Client *dst, std::vector<pollfd> &fds);
void	err_uniqoprivsneeded(Client *dst, std::vector<pollfd> &fds);
void	err_nooperhost(Client *dst, std::vector<pollfd> &fds);
void	err_umodeunknownflag(Client *dst, std::vector<pollfd> &fds);
void	err_usersdontmatch(Client *dst, std::vector<pollfd> &fds);

// messages

void	send_part(Client *dst, std::vector<pollfd> &fds, std::string nick, std::string chan);
void	rpl_welcome(Client *dst, std::vector<pollfd> &fds, std::string user, std::string host);
void	rpl_yourhost(Client *dst, std::vector<pollfd> &fds);
void	rpl_created(Client *dst, std::vector<pollfd> &fds); // fait un truc un peu mieux quand meme
void	rpl_myinfo(Client *dst, std::vector<pollfd> &fds, std::string user_modes, std::string channel_modes);
void	rpl_pong(Client *dst, std::vector<pollfd> &fds);
// void	rpl_bounce(Client *dst, std::vector<pollfd> &fds);
// void	rpl_none(Client *dst, std::vector<pollfd> &fds);
void	rpl_userhost(Client *dst, std::vector<pollfd> &fds, std::string *replies, int nb_replies);
void	rpl_ison(Client *dst, std::vector<pollfd> &fds, std::string *nicks, int nb_nicks);
void	rpl_away(Client *dst, std::vector<pollfd> &fds, std::string away_nick, std::string away_msg);
void	rpl_unaway(Client *dst, std::vector<pollfd> &fds);
void	rpl_nowaway(Client *dst, std::vector<pollfd> &fds);
void	rpl_whoisuser(Client *dst, std::vector<pollfd> &fds, std::string nick, std::string user, std::string host, std::string real_name);
void	rpl_whoisserver(Client *dst, std::vector<pollfd> &fds, std::string nick, std::string server, std::string serv_info);
void	rpl_whoisoperator(Client *dst, std::vector<pollfd> &fds, std::string nick);
void	rpl_whoisidle(Client *dst, std::vector<pollfd> &fds, std::string nick, int len);
void	rpl_endofwhois(Client *dst, std::vector<pollfd> &fds, std::string nick);
void	rpl_whoischannels(Client *dst, std::vector<pollfd> &fds, std::string nick, std::string *channels, int nb_channels);
void	rpl_whowasuser(Client *dst, std::vector<pollfd> &fds, std::string nick, std::string user, std::string host, std::string real_name);
void	rpl_endofwhowas(Client *dst, std::vector<pollfd> &fds, std::string nick);
void	rpl_liststart(Client *dst, std::vector<pollfd> &fds);
void	rpl_list(Client *dst, std::vector<pollfd> &fds, std::string channel,
	std::string nb_users, std::string topic);
void	rpl_listend(Client *dst, std::vector<pollfd> &fds);
void	rpl_channelmodeis(Client *dst, std::vector<pollfd> &fds, std::string channel, std::string mode, std::string mode_params);
void	rpl_notopic(Client *dst, std::vector<pollfd> &fds, std::string channel);
void	rpl_topic(Client *dst, std::vector<pollfd> &fds, std::string channel, std::string topic);
void	rpl_inviting(Client *dst, std::vector<pollfd> &fds, std::string channel, std::string nick);
void	rpl_summoning(Client *dst, std::vector<pollfd> &fds, std::string user);
void	rpl_exceptlist(Client *dst, std::vector<pollfd> &fds, std::string channel, std::string mask);
void	rpl_endofexceptlist(Client *dst, std::vector<pollfd> &fds, std::string channel);
void	rpl_version(Client *dst, std::vector<pollfd> &fds);
void	rpl_whoreply(Client *dst, std::vector<pollfd> &fds, std::string chan, std::string user, std::string host, std::string server, std::string nick,
		std::string weird_args, int hop_count, std::string real_name);
void	rpl_endofwho(Client *dst, std::vector<pollfd> &fds, std::string name);
void	rpl_namreply(Client *dst, std::vector<pollfd> &fds, Channel chan);
void	rpl_namreply_other_clients(Client *dst, std::vector<pollfd> &fds,
	std::vector<Channel> &all_channels,
	std::vector<Client *> &all_clients);
void	rpl_endofnames(Client *dst, std::vector<pollfd> &fds, std::string channel);
void	rpl_links(Client *dst, std::vector<pollfd> &fds, std::string mask, std::string server, int hop_count, std::string serv_info);
void	rpl_endoflinks(Client *dst, std::vector<pollfd> &fds);
void	rpl_banlist(Client *dst, std::vector<pollfd> &fds, std::string channel, std::string banmask);
void	rpl_endofbanlist(Client *dst, std::vector<pollfd> &fds, std::string channel);
void	rpl_info(Client *dst, std::vector<pollfd> &fds, std::string info);
void	rpl_endofinfo(Client *dst, std::vector<pollfd> &fds);
void	rpl_motdstart(Client *dst, std::vector<pollfd> &fds);
void	rpl_motd(Client *dst, std::vector<pollfd> &fds, std::string msg);
void	rpl_endofmotd(Client *dst, std::vector<pollfd> &fds);
void	rpl_youreoper(Client *dst, std::vector<pollfd> &fds);
void	rpl_rehashing(Client *dst, std::vector<pollfd> &fds, std::string config_file);
void	rpl_time(Client *dst, std::vector<pollfd> &fds);
void	rpl_usersstart(Client *dst, std::vector<pollfd> &fds);
void	rpl_users(Client *dst, std::vector<pollfd> &fds, std::string username, std::string ttyline, std::string hostname);
void	rpl_endofusers(Client *dst, std::vector<pollfd> &fds);
void	rpl_nousers(Client *dst, std::vector<pollfd> &fds);
// void	rpl_tracelink(Client *dst, std::vector<pollfd> &fds);
// void	rpl_traceconnecting(Client *dst, std::vector<pollfd> &fds);
// void	rpl_tracehandshake(Client *dst, std::vector<pollfd> &fds);
// void	rpl_traceunknown(Client *dst, std::vector<pollfd> &fds);
// void	rpl_traceoperator(Client *dst, std::vector<pollfd> &fds);
// void	rpl_traceuser(Client *dst, std::vector<pollfd> &fds);
// void	rpl_traceserver(Client *dst, std::vector<pollfd> &fds);
// void	rpl_tracenewtype(Client *dst, std::vector<pollfd> &fds);
// void	rpl_tracelog(Client *dst, std::vector<pollfd> &fds);
// void	rpl_statslinkinfo(Client *dst, std::vector<pollfd> &fds);
// void	rpl_statscommands(Client *dst, std::vector<pollfd> &fds);
// void	rpl_statscline(Client *dst, std::vector<pollfd> &fds);
// void	rpl_statsnline(Client *dst, std::vector<pollfd> &fds);
// void	rpl_statsiline(Client *dst, std::vector<pollfd> &fds);
// void	rpl_statskline(Client *dst, std::vector<pollfd> &fds);
// void	rpl_statsyline(Client *dst, std::vector<pollfd> &fds);
// void	rpl_endofstats(Client *dst, std::vector<pollfd> &fds);
// void	rpl_statslline(Client *dst, std::vector<pollfd> &fds);
// void	rpl_statsuptime(Client *dst, std::vector<pollfd> &fds);
// void	rpl_statsoline(Client *dst, std::vector<pollfd> &fds);
// void	rpl_statshline(Client *dst, std::vector<pollfd> &fds);
void	rpl_umodeis(Client *dst, std::vector<pollfd> &fds, std::string user_mode);
// void	rpl_luserclient(Client *dst, std::vector<pollfd> &fds);
// void	rpl_luserop(Client *dst, std::vector<pollfd> &fds);
// void	rpl_luserunknown(Client *dst, std::vector<pollfd> &fds);
// void	rpl_luserchannels(Client *dst, std::vector<pollfd> &fds);
// void	rpl_luserme(Client *dst, std::vector<pollfd> &fds);
// void	rpl_adminme(Client *dst, std::vector<pollfd> &fds);
// void	rpl_adminloc1(Client *dst, std::vector<pollfd> &fds);
// void	rpl_adminloc2(Client *dst, std::vector<pollfd> &fds);
// void	rpl_adminemail(Client *dst, std::vector<pollfd> &fds);